# Specific settings for this marker.

[general]
run_id = 4

[marker]
markertype = SEN4CAP-DIV

# strategy to balance the training dataset for the marker. Possible values:
#   * BALANCING_STRATEGY_NONE: don't apply any balancing: 20% of the input samples per class is used for training
#   * BALANCING_STRATEGY_MEDIUM: 80% of input data is used for training, with maximum 10.000 samples per class and minimum 1.000 (samples will be duplicated if needed)
#   * BALANCING_STRATEGY_MEDIUM2: 80% of input data is used for training, with maximum 10.000 samples per class depending on input count + minimum 1.000 (samples will be duplicated if needed)
#   * BALANCING_STRATEGY_UPPER_LIMIT: 80% of input data is used for training, with a maximum of 10.000 samples per class
#   * BALANCING_STRATEGY_PROPORTIONAL_GROUPS: 80% of input data is used for training, but for classes with > 10.000 samples +- only half of those are used  
#   * BALANCING_STRATEGY_EQUAL: for each input class, the same amount of samples is used as training. For classes with few samples, (samples will be duplicated if needed)
balancing_strategy = BALANCING_STRATEGY_NONE

# minimum number of pixels that should be inside the buffered input parcels
min_nb_pixels = -2
# minimum number of pixels that should be inside the buffered input parcels used when training
#min_nb_pixels_train = ${marker:min_nb_pixels}
min_nb_pixels_train = ${min_nb_pixels}

# start date of timeseries data to use
# remarks: nearest monday will be used + year will be replaced in run-time
start_date_str = ${year}-03-15 
# end date of timeseries data to use
# remarks: end date is NOT inclusive + year will be replaced in run-time
end_date_str = ${year}-08-19

# add classes that should be ignored for training, but have to get a prediction
classes_to_ignore_for_train = ${classes_to_ignore_for_train_default}, MON_ONBEKEND_MET_KLASSIFICATIE
# add classes that will be ignored for training and won't receive a prediction 
classes_to_ignore = ${classes_to_ignore_default}, MON_SUBSIDIABEL_NIET, MON_MOEILIJK_ZONDER_KLASSIFICATIE, MON_MOEILIJK_ZONDER_KLASSIFICATIE_NS, MON_GRASSEN_BRAAK_NIETSUB, MON_HEG_RIJ_POEL, MON_STAL_GEB, MON_GEEN_HOOFDTEELT, MON_CONTAINER, MON_OVERK_LOO, 1, 2, 3, 4, 6, 9, 999 ,9603, 9604, 9581, 81, 9560, 895, 962, 9825, 745, 8910, 894, 9602, 85, 9569, 39, 883

# classes that should specified as unimportant in the reporting
# Remark: this doesn't influence the training or predicting, these need to be set in 
# the other parameters!
classes_to_ignore_unimportant = ${classes_to_ignore_unimportant_default}, MON_STAL_GEB, MON_SUBSIDIABEL_NIET, MON_GRASSEN_BRAAK_NIETSUB, MON_MOEILIJK_ZONDER_KLASSIFICATIE_NS

# The sensor data to be used for this marker
#sensordata_to_use = ${general:SENSORDATA_S1_ASCDESC}, ${general:SENSORDATA_S2gt95}, ${general:SENSORDATA_S1_COHERENCE}
sensordata_to_use = ${general:SENSORDATA_S1_ASCDESC}, ${general:SENSORDATA_S2gt95}, ${general:SENSORDATA_S1_COHERENCE}

[columns]
# Column name of the classes to prepropress to in the refe file
class_refe = SEN4CAP_DIV

[classifier]
# The classifier type to use. Currently supported types:
#     * keras_multilayer_perceptron (using keras)
#     * multilayer_perceptron (using sklearn)
#     * nearestneighbour
#     * randomforest
#     * svm
classifier_type = keras_multilayer_perceptron
# The extension of the file format to save the trained model to
classifier_ext = .hdf5

[preprocess]
# The way the classtype needs to be prepared
classtype_to_prepare = CROPGROUP

[postprocess]
# Doubt: if highest probability < 2*second probability  
doubt_proba1_st_2_x_proba2 = False
# Doubt: if prediction == input class and highest probability < pct
doubt_pred_eq_input_proba1_st_pct = 0
# Doubt: if prediction != input class and highest probability < pct
doubt_pred_ne_input_proba1_st_pct = 94.5
